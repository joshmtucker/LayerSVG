require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"LayerSVG":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.LayerSVG = (function(superClass) {
  extend(LayerSVG, superClass);

  function LayerSVG(options) {
    if (options == null) {
      options = {};
    }
    this.addShape = bind(this.addShape, this);
    this.shapes = [];
    LayerSVG.__super__.constructor.call(this, options);
    this.html = "<svg id='" + options.id + "' width='" + this.width + "' height='" + this.height + "'>/<svg>";
    this.svg = this.querySelector("#" + options.id);
  }

  LayerSVG.prototype.addShape = function(type, options) {
    var option, shape, value;
    if (options == null) {
      options = {};
    }
    shape = document.createElementNS("http://www.w3.org/2000/svg", "" + type);
    for (option in options) {
      if (!hasProp.call(options, option)) continue;
      value = options[option];
      shape.setAttributeNS(null, "" + option, "" + options[option]);
    }
    this.svg.appendChild(shape);
    this.shapes.push(shape);
    return shape;
  };

  return LayerSVG;

})(Layer);

},{}],"LayerSVG":[function(require,module,exports){
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.LayerSVG = (function(superClass) {
  extend(LayerSVG, superClass);

  function LayerSVG(options) {
    if (options == null) {
      options = {};
    }
    this.addShape = bind(this.addShape, this);
    this.shapes = [];
    LayerSVG.__super__.constructor.call(this, options);
    this.html = "<svg id='" + options.id + "' width='" + this.width + "' height='" + this.height + "'>/<svg>";
    this.svg = this.querySelector("#" + options.id);
  }

  LayerSVG.prototype.addShape = function(type, options) {
    var option, shape, value;
    if (options == null) {
      options = {};
    }
    shape = document.createElementNS("http://www.w3.org/2000/svg", "" + type);
    for (option in options) {
      if (!hasProp.call(options, option)) continue;
      value = options[option];
      shape.setAttributeNS(null, "" + option, "" + options[option]);
    }
    this.svg.appendChild(shape);
    this.shapes.push(shape);
    return shape;
  };

  return LayerSVG;

})(Layer);



},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9qb3NobXR1Y2tlci9HaXRIdWIvTGF5ZXJTVkcvTGF5ZXJTVkcuZnJhbWVyL21vZHVsZXMvTGF5ZXJTVkcuanMiLCIvVXNlcnMvam9zaG10dWNrZXIvR2l0SHViL0xheWVyU1ZHL0xheWVyU1ZHLmZyYW1lci9tb2R1bGVzL0xheWVyU1ZHLmNvZmZlZSIsIi9Vc2Vycy9qb3NobXR1Y2tlci9HaXRIdWIvTGF5ZXJTVkcvTGF5ZXJTVkcuZnJhbWVyL21vZHVsZXMvbXlNb2R1bGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQSxJQUFBOzs2QkFBQTs7QUFBQSxPQUFhLENBQUM7QUFDYiw4QkFBQSxDQUFBOztBQUFhLEVBQUEsa0JBQUMsT0FBRCxHQUFBOztNQUFDLFVBQVE7S0FFckI7QUFBQSw2Q0FBQSxDQUFBO0FBQUEsSUFBQSxJQUFDLENBQUMsTUFBRixHQUFXLEVBQVgsQ0FBQTtBQUFBLElBRUEsMENBQU0sT0FBTixDQUZBLENBQUE7QUFBQSxJQUlBLElBQUMsQ0FBQyxJQUFGLEdBQVMsV0FBQSxHQUFZLE9BQU8sQ0FBQyxFQUFwQixHQUF1QixXQUF2QixHQUFrQyxJQUFDLENBQUMsS0FBcEMsR0FBMEMsWUFBMUMsR0FBc0QsSUFBQyxDQUFDLE1BQXhELEdBQStELFVBSnhFLENBQUE7QUFBQSxJQUtBLElBQUMsQ0FBQyxHQUFGLEdBQVEsSUFBQyxDQUFDLGFBQUYsQ0FBZ0IsR0FBQSxHQUFJLE9BQU8sQ0FBQyxFQUE1QixDQUxSLENBRlk7RUFBQSxDQUFiOztBQUFBLHFCQVVBLFFBQUEsR0FBVSxTQUFDLElBQUQsRUFBTyxPQUFQLEdBQUE7QUFDVCxRQUFBLG9CQUFBOztNQURnQixVQUFRO0tBQ3hCO0FBQUEsSUFBQSxLQUFBLEdBQVEsUUFBUSxDQUFDLGVBQVQsQ0FBeUIsNEJBQXpCLEVBQXVELEVBQUEsR0FBRyxJQUExRCxDQUFSLENBQUE7QUFDQSxTQUFBLGlCQUFBOzs4QkFBQTtBQUNDLE1BQUEsS0FBSyxDQUFDLGNBQU4sQ0FBcUIsSUFBckIsRUFBMkIsRUFBQSxHQUFHLE1BQTlCLEVBQXdDLEVBQUEsR0FBRyxPQUFRLENBQUEsTUFBQSxDQUFuRCxDQUFBLENBREQ7QUFBQSxLQURBO0FBQUEsSUFJQSxJQUFDLENBQUMsR0FBRyxDQUFDLFdBQU4sQ0FBa0IsS0FBbEIsQ0FKQSxDQUFBO0FBQUEsSUFLQSxJQUFDLENBQUMsTUFBTSxDQUFDLElBQVQsQ0FBYyxLQUFkLENBTEEsQ0FBQTtBQU9BLFdBQU8sS0FBUCxDQVJTO0VBQUEsQ0FWVixDQUFBOztrQkFBQTs7R0FEOEIsTUFBL0IsQ0FBQTs7Ozs7QUNJQSxPQUFPLENBQUMsS0FBUixHQUFnQixZQUFoQixDQUFBOztBQUFBLE9BRU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUEsR0FBQTtTQUNwQixLQUFBLENBQU0sdUJBQU4sRUFEb0I7QUFBQSxDQUZyQixDQUFBOztBQUFBLE9BS08sQ0FBQyxPQUFSLEdBQWtCLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBTGxCLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuMVxudmFyIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuZXhwb3J0cy5MYXllclNWRyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChMYXllclNWRywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gTGF5ZXJTVkcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5hZGRTaGFwZSA9IGJpbmQodGhpcy5hZGRTaGFwZSwgdGhpcyk7XG4gICAgdGhpcy5zaGFwZXMgPSBbXTtcbiAgICBMYXllclNWRy5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB0aGlzLmh0bWwgPSBcIjxzdmcgaWQ9J1wiICsgb3B0aW9ucy5pZCArIFwiJyB3aWR0aD0nXCIgKyB0aGlzLndpZHRoICsgXCInIGhlaWdodD0nXCIgKyB0aGlzLmhlaWdodCArIFwiJz4vPHN2Zz5cIjtcbiAgICB0aGlzLnN2ZyA9IHRoaXMucXVlcnlTZWxlY3RvcihcIiNcIiArIG9wdGlvbnMuaWQpO1xuICB9XG5cbiAgTGF5ZXJTVkcucHJvdG90eXBlLmFkZFNoYXBlID0gZnVuY3Rpb24odHlwZSwgb3B0aW9ucykge1xuICAgIHZhciBvcHRpb24sIHNoYXBlLCB2YWx1ZTtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHNoYXBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJcIiArIHR5cGUpO1xuICAgIGZvciAob3B0aW9uIGluIG9wdGlvbnMpIHtcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKG9wdGlvbnMsIG9wdGlvbikpIGNvbnRpbnVlO1xuICAgICAgdmFsdWUgPSBvcHRpb25zW29wdGlvbl07XG4gICAgICBzaGFwZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIlwiICsgb3B0aW9uLCBcIlwiICsgb3B0aW9uc1tvcHRpb25dKTtcbiAgICB9XG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoc2hhcGUpO1xuICAgIHRoaXMuc2hhcGVzLnB1c2goc2hhcGUpO1xuICAgIHJldHVybiBzaGFwZTtcbiAgfTtcblxuICByZXR1cm4gTGF5ZXJTVkc7XG5cbn0pKExheWVyKTtcbiIsImNsYXNzIGV4cG9ydHMuTGF5ZXJTVkcgZXh0ZW5kcyBMYXllciBcblx0Y29uc3RydWN0b3I6IChvcHRpb25zPXt9KSAtPlxuXG5cdFx0QC5zaGFwZXMgPSBbXVxuXHRcdFxuXHRcdHN1cGVyIG9wdGlvbnNcblxuXHRcdEAuaHRtbCA9IFwiPHN2ZyBpZD0nI3tvcHRpb25zLmlkfScgd2lkdGg9JyN7QC53aWR0aH0nIGhlaWdodD0nI3tALmhlaWdodH0nPi88c3ZnPlwiXG5cdFx0QC5zdmcgPSBALnF1ZXJ5U2VsZWN0b3IoXCIjI3tvcHRpb25zLmlkfVwiKVx0XG5cblxuXHRhZGRTaGFwZTogKHR5cGUsIG9wdGlvbnM9e30pID0+XG5cdFx0c2hhcGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcIiN7dHlwZX1cIilcblx0XHRmb3Igb3duIG9wdGlvbiwgdmFsdWUgb2Ygb3B0aW9uc1xuXHRcdFx0c2hhcGUuc2V0QXR0cmlidXRlTlMobnVsbCwgXCIje29wdGlvbn1cIiwgXCIje29wdGlvbnNbb3B0aW9uXX1cIilcblxuXHRcdEAuc3ZnLmFwcGVuZENoaWxkKHNoYXBlKVxuXHRcdEAuc2hhcGVzLnB1c2goc2hhcGUpXG5cblx0XHRyZXR1cm4gc2hhcGUiLCIjIEFkZCB0aGUgZm9sbG93aW5nIGxpbmUgdG8geW91ciBwcm9qZWN0IGluIEZyYW1lciBTdHVkaW8uIFxuIyBteU1vZHVsZSA9IHJlcXVpcmUgXCJteU1vZHVsZVwiXG4jIFJlZmVyZW5jZSB0aGUgY29udGVudHMgYnkgbmFtZSwgbGlrZSBteU1vZHVsZS5teUZ1bmN0aW9uKCkgb3IgbXlNb2R1bGUubXlWYXJcblxuZXhwb3J0cy5teVZhciA9IFwibXlWYXJpYWJsZVwiXG5cbmV4cG9ydHMubXlGdW5jdGlvbiA9IC0+XG5cdHByaW50IFwibXlGdW5jdGlvbiBpcyBydW5uaW5nXCJcblxuZXhwb3J0cy5teUFycmF5ID0gWzEsIDIsIDNdIl19

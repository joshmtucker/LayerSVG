require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"LayerSVG":[function(require,module,exports){
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.LayerSVG = (function(superClass) {
  extend(LayerSVG, superClass);

  function LayerSVG(options) {
    if (options == null) {
      options = {};
    }
    this.addShape = bind(this.addShape, this);
    LayerSVG.__super__.constructor.call(this, options);
    this.shapes = {};
    this.html = "<svg id='" + options.id + "' width='" + this.width + "' height='" + this.height + "'>/<svg>";
    this.element = this.querySelector("#" + options.id);
  }

  LayerSVG.prototype.addShape = function(type, options) {
    var option, shape, value;
    if (options == null) {
      options = {};
    }
    shape = document.createElementNS("http://www.w3.org/2000/svg", "" + type);
    for (option in options) {
      if (!hasProp.call(options, option)) continue;
      value = options[option];
      shape.setAttributeNS(null, "" + option, "" + options[option]);
    }
    this.element.appendChild(shape);
    this.shapes["" + options.id] = shape;
    return shape;
  };

  return LayerSVG;

})(Layer);



},{}],"LayerSVG":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.LayerSVG = (function(superClass) {
  extend(LayerSVG, superClass);

  function LayerSVG(options) {
    if (options == null) {
      options = {};
    }
    this.addShape = bind(this.addShape, this);
    LayerSVG.__super__.constructor.call(this, options);
    this.shapes = {};
    this.html = "<svg id='" + options.id + "' width='" + this.width + "' height='" + this.height + "'>/<svg>";
    this.element = this.querySelector("#" + options.id);
  }

  LayerSVG.prototype.addShape = function(type, options) {
    var option, shape, value;
    if (options == null) {
      options = {};
    }
    shape = document.createElementNS("http://www.w3.org/2000/svg", "" + type);
    for (option in options) {
      if (!hasProp.call(options, option)) continue;
      value = options[option];
      shape.setAttributeNS(null, "" + option, "" + options[option]);
    }
    this.element.appendChild(shape);
    this.shapes["" + options.id] = shape;
    return shape;
  };

  return LayerSVG;

})(Layer);

},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];



},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvam9zaG10dWNrZXIvR2l0SHViL0xheWVyU1ZHL0xheWVyU1ZHLmZyYW1lci9tb2R1bGVzL0xheWVyU1ZHLmNvZmZlZSIsIi4uLy4uLy4uLy4uLy4uL1VzZXJzL2pvc2htdHVja2VyL0dpdEh1Yi9MYXllclNWRy9MYXllclNWRy5mcmFtZXIvbW9kdWxlcy9MYXllclNWRy5qcyIsIi9Vc2Vycy9qb3NobXR1Y2tlci9HaXRIdWIvTGF5ZXJTVkcvTGF5ZXJTVkcuZnJhbWVyL21vZHVsZXMvbXlNb2R1bGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBQTs7NkJBQUE7O0FBQUEsT0FBYSxDQUFDO0FBQ2IsOEJBQUEsQ0FBQTs7QUFBYSxFQUFBLGtCQUFDLE9BQUQsR0FBQTs7TUFBQyxVQUFRO0tBRXJCO0FBQUEsNkNBQUEsQ0FBQTtBQUFBLElBQUEsMENBQU0sT0FBTixDQUFBLENBQUE7QUFBQSxJQUVBLElBQUMsQ0FBQSxNQUFELEdBQVUsRUFGVixDQUFBO0FBQUEsSUFHQSxJQUFDLENBQUEsSUFBRCxHQUFRLFdBQUEsR0FBWSxPQUFPLENBQUMsRUFBcEIsR0FBdUIsV0FBdkIsR0FBa0MsSUFBQyxDQUFDLEtBQXBDLEdBQTBDLFlBQTFDLEdBQXNELElBQUMsQ0FBQyxNQUF4RCxHQUErRCxVQUh2RSxDQUFBO0FBQUEsSUFJQSxJQUFDLENBQUEsT0FBRCxHQUFXLElBQUMsQ0FBQyxhQUFGLENBQWdCLEdBQUEsR0FBSSxPQUFPLENBQUMsRUFBNUIsQ0FKWCxDQUZZO0VBQUEsQ0FBYjs7QUFBQSxxQkFTQSxRQUFBLEdBQVUsU0FBQyxJQUFELEVBQU8sT0FBUCxHQUFBO0FBQ1QsUUFBQSxvQkFBQTs7TUFEZ0IsVUFBUTtLQUN4QjtBQUFBLElBQUEsS0FBQSxHQUFRLFFBQVEsQ0FBQyxlQUFULENBQXlCLDRCQUF6QixFQUF1RCxFQUFBLEdBQUcsSUFBMUQsQ0FBUixDQUFBO0FBQ0EsU0FBQSxpQkFBQTs7OEJBQUE7QUFDQyxNQUFBLEtBQUssQ0FBQyxjQUFOLENBQXFCLElBQXJCLEVBQTJCLEVBQUEsR0FBRyxNQUE5QixFQUF3QyxFQUFBLEdBQUcsT0FBUSxDQUFBLE1BQUEsQ0FBbkQsQ0FBQSxDQUREO0FBQUEsS0FEQTtBQUFBLElBSUEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxXQUFULENBQXFCLEtBQXJCLENBSkEsQ0FBQTtBQUFBLElBS0EsSUFBQyxDQUFBLE1BQU8sQ0FBQSxFQUFBLEdBQUcsT0FBTyxDQUFDLEVBQVgsQ0FBUixHQUEyQixLQUwzQixDQUFBO0FBT0EsV0FBTyxLQUFQLENBUlM7RUFBQSxDQVRWLENBQUE7O2tCQUFBOztHQUQ4QixNQUEvQixDQUFBOzs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0EsT0FBTyxDQUFDLEtBQVIsR0FBZ0IsWUFBaEIsQ0FBQTs7QUFBQSxPQUVPLENBQUMsVUFBUixHQUFxQixTQUFBLEdBQUE7U0FDcEIsS0FBQSxDQUFNLHVCQUFOLEVBRG9CO0FBQUEsQ0FGckIsQ0FBQTs7QUFBQSxPQUtPLENBQUMsT0FBUixHQUFrQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUxsQixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImNsYXNzIGV4cG9ydHMuTGF5ZXJTVkcgZXh0ZW5kcyBMYXllciBcblx0Y29uc3RydWN0b3I6IChvcHRpb25zPXt9KSAtPlxuXHRcdFxuXHRcdHN1cGVyIG9wdGlvbnNcblxuXHRcdEBzaGFwZXMgPSB7fVxuXHRcdEBodG1sID0gXCI8c3ZnIGlkPScje29wdGlvbnMuaWR9JyB3aWR0aD0nI3tALndpZHRofScgaGVpZ2h0PScje0AuaGVpZ2h0fSc+Lzxzdmc+XCJcblx0XHRAZWxlbWVudCA9IEAucXVlcnlTZWxlY3RvcihcIiMje29wdGlvbnMuaWR9XCIpXHRcblxuXG5cdGFkZFNoYXBlOiAodHlwZSwgb3B0aW9ucz17fSkgPT5cblx0XHRzaGFwZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiI3t0eXBlfVwiKVxuXHRcdGZvciBvd24gb3B0aW9uLCB2YWx1ZSBvZiBvcHRpb25zXG5cdFx0XHRzaGFwZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIiN7b3B0aW9ufVwiLCBcIiN7b3B0aW9uc1tvcHRpb25dfVwiKVxuXG5cdFx0QGVsZW1lbnQuYXBwZW5kQ2hpbGQoc2hhcGUpXG5cdFx0QHNoYXBlc1tcIiN7b3B0aW9ucy5pZH1cIl0gPSBzaGFwZVxuXG5cdFx0cmV0dXJuIHNoYXBlIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuMVxudmFyIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuZXhwb3J0cy5MYXllclNWRyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChMYXllclNWRywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gTGF5ZXJTVkcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5hZGRTaGFwZSA9IGJpbmQodGhpcy5hZGRTaGFwZSwgdGhpcyk7XG4gICAgTGF5ZXJTVkcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgdGhpcy5zaGFwZXMgPSB7fTtcbiAgICB0aGlzLmh0bWwgPSBcIjxzdmcgaWQ9J1wiICsgb3B0aW9ucy5pZCArIFwiJyB3aWR0aD0nXCIgKyB0aGlzLndpZHRoICsgXCInIGhlaWdodD0nXCIgKyB0aGlzLmhlaWdodCArIFwiJz4vPHN2Zz5cIjtcbiAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCIjXCIgKyBvcHRpb25zLmlkKTtcbiAgfVxuXG4gIExheWVyU1ZHLnByb3RvdHlwZS5hZGRTaGFwZSA9IGZ1bmN0aW9uKHR5cGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9uLCBzaGFwZSwgdmFsdWU7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBzaGFwZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiXCIgKyB0eXBlKTtcbiAgICBmb3IgKG9wdGlvbiBpbiBvcHRpb25zKSB7XG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChvcHRpb25zLCBvcHRpb24pKSBjb250aW51ZTtcbiAgICAgIHZhbHVlID0gb3B0aW9uc1tvcHRpb25dO1xuICAgICAgc2hhcGUuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJcIiArIG9wdGlvbiwgXCJcIiArIG9wdGlvbnNbb3B0aW9uXSk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChzaGFwZSk7XG4gICAgdGhpcy5zaGFwZXNbXCJcIiArIG9wdGlvbnMuaWRdID0gc2hhcGU7XG4gICAgcmV0dXJuIHNoYXBlO1xuICB9O1xuXG4gIHJldHVybiBMYXllclNWRztcblxufSkoTGF5ZXIpO1xuIiwiIyBBZGQgdGhlIGZvbGxvd2luZyBsaW5lIHRvIHlvdXIgcHJvamVjdCBpbiBGcmFtZXIgU3R1ZGlvLiBcbiMgbXlNb2R1bGUgPSByZXF1aXJlIFwibXlNb2R1bGVcIlxuIyBSZWZlcmVuY2UgdGhlIGNvbnRlbnRzIGJ5IG5hbWUsIGxpa2UgbXlNb2R1bGUubXlGdW5jdGlvbigpIG9yIG15TW9kdWxlLm15VmFyXG5cbmV4cG9ydHMubXlWYXIgPSBcIm15VmFyaWFibGVcIlxuXG5leHBvcnRzLm15RnVuY3Rpb24gPSAtPlxuXHRwcmludCBcIm15RnVuY3Rpb24gaXMgcnVubmluZ1wiXG5cbmV4cG9ydHMubXlBcnJheSA9IFsxLCAyLCAzXSJdfQ==

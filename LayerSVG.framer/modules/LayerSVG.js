// Generated by CoffeeScript 1.9.1
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.LayerSVG = (function(superClass) {
  extend(LayerSVG, superClass);

  function LayerSVG(options) {
    if (options == null) {
      options = {};
    }
    LayerSVG.__super__.constructor.call(this, options);
    this.html = "<svg id='" + options.id + "' width='" + this.width + "' height='" + this.height + "'><defs></defs></svg>";
    this.svg = this.querySelector("#" + options.id);
    this.shapes = {};
    this.masks = {};
    this.clipPaths = {};
  }

  LayerSVG.prototype.addShape = function(options) {
    var option, shape, value;
    if (options == null) {
      options = {};
    }
    shape = document.createElementNS("http://www.w3.org/2000/svg", "" + options.shape);
    for (option in options) {
      if (!hasProp.call(options, option)) continue;
      value = options[option];
      if (option !== "shape") {
        shape.setAttributeNS(null, "" + option, "" + options[option]);
      }
    }
    this.svg.appendChild(shape);
    this.shapes["" + options.id] = shape;
    return shape;
  };

  LayerSVG.prototype.addDef = function(options) {
    var def, defs, i, len, ref, shape;
    if (options == null) {
      options = {};
    }
    def = document.createElementNS("http://www.w3.org/2000/svg", "" + options.type);
    def.setAttributeNS(null, "id", "" + options.id);
    if (def === "clipPath" || "mask") {
      ref = options.shapes;
      for (i = 0, len = ref.length; i < len; i++) {
        shape = ref[i];
        if (typeof shape === "string") {
          shape = this.svg.getElementById("" + shape);
        }
        def.appendChild(shape);
      }
    }
    defs = this.svg.getElementsByTagName("defs")[0];
    defs.appendChild(def);
    if (options.type === "clipPath") {
      return this.clipPaths["" + options.id] = def;
    } else {
      return this.masks["" + options.id] = def;
    }
  };

  LayerSVG.prototype.addToMask = function(shapes, mask, prevShape) {
    var i, len, results, shape;
    if (typeof mask === "string") {
      mask = this.svg.getElementById("" + mask);
    }
    if (!Array.isArray(shapes)) {
      shape = shapes;
      if (typeof shape === "string") {
        shape = this.svg.getElementById("" + shape);
      }
      if (!prevShape) {
        return mask.appendChild(shape);
      } else {
        return mask.insertBefore(shape, prevShape);
      }
    } else {
      results = [];
      for (i = 0, len = shapes.length; i < len; i++) {
        shape = shapes[i];
        if (typeof shape === "string") {
          shape = this.svg.getElementById("" + shape);
        }
        if (!prevShape) {
          results.push(mask.appendChild(shape));
        } else {
          results.push(mask.insertBefore(shape, prevShape));
        }
      }
      return results;
    }
  };

  LayerSVG.prototype.mask = function(shape, mask) {
    if (typeof shape === "string") {
      shape = this.svg.getElementById("" + shape);
    }
    if (typeof mask !== "string") {
      mask = mask.getAttributeNS(null, "id");
    }
    return shape.setAttributeNS(null, "mask", "url(#" + mask + ")");
  };

  return LayerSVG;

})(Layer);
